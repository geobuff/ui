{
  "Component": {
    "prefix": ["react-fc", "fc"],
    "scope": "typescriptreact",
    "body": [
      "import React, { FC } from 'react';",
      "",
      "import { Flex } from '@chakra-ui/react';",
      "",
      "interface Props {",
      "}",
      "",
      "export const ${1:${TM_FILENAME_BASE}}: FC<Props> = ({}) => {",
      "\treturn (",
      "\t\t<Flex>{\"Insert content here...\"}</Flex>",
      "\t)",
      "};",
      ""
    ],
    "description": "Boilerplate for a functional component."
  },
  "Hook": {
    "prefix": ["hook"],
    "scope": "typescriptreact",
    "body": [
      "import useSWR from 'swr';",
      "",
      "import { fetcher } from '../helpers/fetcher';",
      "",
      "interface Result {",
      "\tdata: any;",
      "\tisLoading: boolean;",
      "}",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = (): Result => {",
      "\tconst { data } = useSWR('/route', fetcher);",
      "\t",
      "\treturn {",
      "\t\tdata: data,",
      "\t\tisLoading: !data",
      "\t};",
      "};",
      ""
    ],
    "description": "Boilerplate for a hook."
  },
  "Language Context": {
    "prefix": ["lc"],
    "scope": "typescriptreact",
    "body": ["const { t } = useContext(LanguageContext);"],
    "description": "Initialise variable to access translations."
  },
  "Is Mobile": {
    "prefix": ["mobile"],
    "scope": "typescriptreact",
    "body": ["const isMobile = useBreakpointValue({ base: true, md: false });"],
    "description": "Initialise isMobile variable."
  },
  "Context": {
    "prefix": ["context", "ctx"],
    "scope": "typescriptreact",
    "body": [
      "import React, { FC, createContext } from 'react';\n",
      "export const ${1:${TM_FILENAME_BASE}} = createContext({});\n",
      "interface Props { children: React.ReactNode; }\n",
      "export const ${1:${TM_FILENAME_BASE}}Provider: FC<Props> = ({ children = null }) => {",
      "\treturn (",
      "    <${1:${TM_FILENAME_BASE}}.Provider value={{}}>{children}</${1:${TM_FILENAME_BASE}}.Provider>",
      "\t);",
      "};"
    ],
    "description": "Boilerplate for a context."
  }
}
